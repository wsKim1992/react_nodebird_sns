{"ast":null,"code":"import { all, fork, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n/**\r\n * all, call ,fork, take : saga의 effect\r\n * fork(param) : param으로 받은 함수를 실행\r\n * ※fork 와 call 은 엄연히 다르다!!\r\n * ※ react - thunk 에서는 비동기 action creator을 직접 실행했지만,\r\n *    saga에서는 event-listener 형식으로 실행한다.\r\n * take : action creater 의 event-listener 생성\r\n * call(func) :  func 를 실행하고 return 값을 받음..\r\n * put : action 을 dispatch 해주는 거.\r\n */\n//logInAPI 함수 호출. generator이 아님. \n\nfunction logInAPI() {\n  //서버에 요청전홍\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI); //logInAPI 함수의 반환갑을 받는다.\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take('LOG_IN_REQUEST', logIn); //LOG_IN action 이 실행 될 때 까지 기다리겠다.\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST');\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST');\n} // rootSaga에 비동기 액션들을 넣어준다.\n\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/index.js"],"names":["all","fork","take","put","axios","logInAPI","post","logIn","result","call","type","data","err","response","watchLogin","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAsBC,GAAtB,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,QAAT,GAAmB;AACf;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACJ,QAAD,CAAzB,CADD,CACqC;;AACpC,UAAMF,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAC,gBADC;AAENC,MAAAA,IAAI,EAACH,MAAM,CAACG;AAFN,KAAD,CAAT;AAIH,GAND,CAMC,OAAMC,GAAN,EAAU;AACP,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAC,gBADC;AAENC,MAAAA,IAAI,EAACC,GAAG,CAACC,QAAJ,CAAaF;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,UAAV,GAAsB;AAClB,QAAMZ,IAAI,CAAC,gBAAD,EAAkBK,KAAlB,CAAV,CADkB,CAElB;AACH;;AAED,UAAUQ,WAAV,GAAuB;AACnB,QAAMb,IAAI,CAAC,iBAAD,CAAV;AACH;;AAED,UAAUc,YAAV,GAAwB;AACpB,QAAMd,IAAI,CAAC,kBAAD,CAAV;AACH,C,CAED;;;AACA,eAAe,UAAUe,QAAV,GAAoB;AAC/B,QAAMjB,GAAG,CAAC,CACNC,IAAI,CAACa,UAAD,CADE,EAENb,IAAI,CAACc,WAAD,CAFE,EAGNd,IAAI,CAACe,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {all,fork,take,put} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n/**\r\n * all, call ,fork, take : saga의 effect\r\n * fork(param) : param으로 받은 함수를 실행\r\n * ※fork 와 call 은 엄연히 다르다!!\r\n * ※ react - thunk 에서는 비동기 action creator을 직접 실행했지만,\r\n *    saga에서는 event-listener 형식으로 실행한다.\r\n * take : action creater 의 event-listener 생성\r\n * call(func) :  func 를 실행하고 return 값을 받음..\r\n * put : action 을 dispatch 해주는 거.\r\n */\r\n\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logInAPI(){\r\n    //서버에 요청전홍\r\n    return axios.post('/api/login')\r\n}\r\n\r\nfunction* logIn(){\r\n    try{\r\n        const result = yield call(logInAPI);//logInAPI 함수의 반환갑을 받는다.\r\n        yield put({\r\n            type:'LOG_IN_SUCCESS',\r\n            data:result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:'LOG_IN_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield take('LOG_IN_REQUEST',logIn);\r\n    //LOG_IN action 이 실행 될 때 까지 기다리겠다.\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield take('LOG_OUT_REQUEST');\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield take('ADD_POST_REQUEST');\r\n}\r\n\r\n// rootSaga에 비동기 액션들을 넣어준다.\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}