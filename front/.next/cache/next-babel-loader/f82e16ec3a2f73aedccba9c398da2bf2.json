{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          //const result = yield call(addPostAPI,action.data);\n          console.log(action.data);\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortId.generate();\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/commnet\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context7.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context7.next = 11;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 11;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context7.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 7]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","removePost","watchRemovePost","loadPosts","watchLoadPosts","postSaga","all","fork","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","action","console","log","id","generate","type","content","response","addCommentAPI","postId","removePostAPI","loadPostsAPI","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE"],"mappings":"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","sourcesContent":["import {all,fork,put,takeLatest,delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE\r\n    ,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST} from '../reducers/post';\r\nimport { ADD_POST_TO_ME,REMOVE_POST_OF_ME } from '../reducers/user';\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        console.log(action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:{id,content:action.data}\r\n        })\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:id,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/commnet`,data);\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* removePost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:REMOVE_POST_SUCCESS,\r\n            data:action.data\r\n        })\r\n        yield put({\r\n            type:REMOVE_POST_OF_ME,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:REMOVE_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\n\r\nfunction loadPostsAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* loadPosts(action){\r\n    try{\r\n        //const result = yield call(loadPostsAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:LOAD_POSTS_SUCCESS,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:LOAD_POSTS_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts(){\r\n    yield takeLatest(LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}