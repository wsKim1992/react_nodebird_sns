{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  postAdded: false,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat();\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'wooseokKim'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'wooseokKim'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","postAdded","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","v","i","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState={\r\n    mainPosts:[],\r\n    imagePaths:[],\r\n    postAdded:false,\r\n    addPostLoading:false,\r\n    addPostDone:false,\r\n    addPostError:null,\r\n    removePostLoading:false,\r\n    removePostDone:false,\r\n    removePostError:null,\r\n    addCommentLoading:false,\r\n    addCommentDone:false,\r\n    addCommentError:null,\r\n}\r\n\r\nexport const generateDummyPost=(number)=>Array(number).fill().map((v,i)=>({\r\n    id:shortId.generate(),\r\n    User:{\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content:faker.lorem.paragraph(),\r\n    Images:[{\r\n        src:faker.image.imageUrl(),\r\n    }],\r\n    Comments:[{\r\n        User:{\r\n            id:shortId.generate(),\r\n            nickname:faker.name.findName()\r\n        },\r\n        content:faker.lorem.sentence(),\r\n    }],\r\n}))\r\n\r\ninitialState.mainPosts=initialState.mainPosts.concat(\r\n    \r\n)\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost=(data)=>({\r\n    type:ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nexport const addComment=(data)=>({\r\n    type:ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPost = (data)=>({\r\n    id:data.id,\r\n    content:data.content,\r\n    User:{\r\n        id:1,\r\n        nickname:'wooseokKim'\r\n    },\r\n    Images:[],\r\n    Comments:[],\r\n})\r\n\r\nconst dummyComment=(data)=>({\r\n    id:shortId.generate(),\r\n    content:data,\r\n    User:{\r\n        id:1,\r\n        nickname:'wooseokKim'\r\n    }\r\n})\r\n\r\nconst reducer = (state=initialState,action)=>{\r\n    return produce (state,(draft)=>{\r\n        switch(action.type){\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading=true;\r\n                draft.addPostDone= false;\r\n                draft.addPostError=null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading=false;\r\n                draft.addPostDone=true;    \r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading=false;\r\n                draft.addPostError=action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading=true;\r\n                draft.removePostDone=false;\r\n                draft.removePostError=null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts=draft.mainPosts.filter((v)=>v.id!==action.data);\r\n                draft.removePostLoading=false;\r\n                draft.removePostDone=true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading=false;\r\n                draft.removePostError=action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading=true;\r\n                draft.addCommentDone=false;\r\n                draft.addCommentError=null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v)=>v.id===action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading=false;\r\n                draft.addCommentDone=true;\r\n                break;\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading=false;\r\n                draft.addCommentError=action.error;\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n    })\r\n    \r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}