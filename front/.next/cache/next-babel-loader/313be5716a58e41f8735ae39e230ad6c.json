{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortId from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data);\n    console.log(action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/commnet`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(loadPostsAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","console","log","id","generate","type","content","err","response","watchAddPost","addCommentAPI","postId","addComment","watchAddComment","removePostAPI","removePost","watchRemovePost","loadPostsAPI","loadPosts","generateDummyPost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import {all,fork,put,takeLatest,delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE\r\n    ,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_FAILURE\r\n    ,REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_FAILURE\r\n    ,LOAD_POSTS_REQUEST,LOAD_POSTS_SUCCESS,LOAD_POSTS_FAILURE} from '../reducers/post';\r\nimport { ADD_POST_TO_ME,REMOVE_POST_OF_ME } from '../reducers/user';\r\nimport shortId from 'shortid';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        console.log(action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:{id,content:action.data}\r\n        })\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:id,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/commnet`,data);\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nfunction removePostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* removePost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:REMOVE_POST_SUCCESS,\r\n            data:action.data\r\n        })\r\n        yield put({\r\n            type:REMOVE_POST_OF_ME,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:REMOVE_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\n\r\nfunction loadPostsAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* loadPosts(action){\r\n    try{\r\n        //const result = yield call(loadPostsAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:LOAD_POSTS_SUCCESS,\r\n            data:generateDummyPost(10)\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:LOAD_POSTS_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts(){\r\n    yield takeLatest(LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}