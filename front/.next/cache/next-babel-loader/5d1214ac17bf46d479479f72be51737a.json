{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\study\\\\nodebird_sns\\\\front\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Form, Input, Button } from 'antd';\nimport { useCallback, useEffect } from 'react';\nimport useInput from '../hooks/useInput';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addComment } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    if (id && commentText !== '') dispatch(addComment({\n      content: commentText,\n      postId: post.id,\n      userId: id\n    }));\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: 'relative',\n        margi: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          position: 'absolute',\n          right: 0,\n          bottom: -40,\n          zIndex: 1\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"\\uC090\\uC57D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(CommentForm, \"uwQDJ3SQAdBStihDuIyecZJKlWc=\", false, function () {\n  return [useSelector, useSelector, useInput, useDispatch];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/components/CommentForm.js"],"names":["Form","Input","Button","useCallback","useEffect","useInput","PropTypes","useSelector","useDispatch","addComment","CommentForm","post","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","dispatch","onSubmitComment","content","postId","userId","position","margi","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,SAAQA,IAAR,EAAcC,KAAd,EAAoBC,MAApB,QAAiC,MAAjC;AACA,SAASC,WAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAU;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAC1B,MAAMC,EAAE,GAAGL,WAAW,CAAC,UAACM,KAAD;AAAA;;AAAA,6BAASA,KAAK,CAACC,IAAN,CAAWC,EAApB,mDAAS,eAAeH,EAAxB;AAAA,GAAD,CAAtB;;AACA,qBAA0CL,WAAW,CAAC,UAACM,KAAD;AAAA,WAASA,KAAK,CAACF,IAAf;AAAA,GAAD,CAArD;AAAA,MAAMK,cAAN,gBAAMA,cAAN;AAAA,MAAqBC,iBAArB,gBAAqBA,iBAArB;;AACA,kBAAuDZ,QAAQ,CAAC,EAAD,CAA/D;AAAA;AAAA,MAAOa,WAAP;AAAA,MAAmBC,mBAAnB;AAAA,MAAuCC,cAAvC;;AACA,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACAJ,EAAAA,SAAS,CAAC,YAAI;AACV,QAAGY,cAAH,EAAkB;AACdI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACH;AACJ,GAJQ,EAIP,CAACJ,cAAD,CAJO,CAAT;AAMA,MAAMM,eAAe,GAAGnB,WAAW,CAAC,YAAI;AACpC,QAAGS,EAAE,IAAEM,WAAW,KAAG,EAArB,EAAwBG,QAAQ,CAACZ,UAAU,CAAC;AAACc,MAAAA,OAAO,EAACL,WAAT;AAAsBM,MAAAA,MAAM,EAACb,IAAI,CAACC,EAAlC;AAAqCa,MAAAA,MAAM,EAACb;AAA5C,KAAD,CAAX,CAAR;AAC3B,GAFkC,EAEjC,CAACM,WAAD,EAAaN,EAAb,CAFiC,CAAnC;AAGA,sBACI,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEU,eAAhB;AAAA,2BACI,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAACI,QAAAA,QAAQ,EAAC,UAAV;AAAqBC,QAAAA,KAAK,EAAC;AAA3B,OAAlB;AAAA,8BACI,QAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,KAAK,EAAET,WAAvB;AAAoC,QAAA,QAAQ,EAAEC,mBAA9C;AAAmE,QAAA,IAAI,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,QAAC,MAAD;AACA,QAAA,KAAK,EAAE;AAACO,UAAAA,QAAQ,EAAC,UAAV;AAAqBE,UAAAA,KAAK,EAAC,CAA3B;AAA6BC,UAAAA,MAAM,EAAC,CAAC,EAArC;AAAwCC,UAAAA,MAAM,EAAC;AAA/C,SADP;AAEA,QAAA,IAAI,EAAC,SAFL;AAGA,QAAA,QAAQ,EAAC,QAHT;AAIA,QAAA,OAAO,EAAEb,iBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAaH,CA3BD;;GAAMP,W;UACSH,W,EAC+BA,W,EACaF,Q,EACtCG,W;;;KAJfE,W;AA6BNA,WAAW,CAACqB,SAAZ,GAAsB;AAClBpB,EAAAA,IAAI,EAACL,SAAS,CAAC0B,MAAV,CAAiBC;AADJ,CAAtB;AAIA,eAAevB,WAAf","sourcesContent":["import {Form, Input,Button} from 'antd';\r\nimport { useCallback,useEffect } from 'react';\r\nimport useInput from '../hooks/useInput';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { addComment } from '../reducers/post';\r\n\r\nconst CommentForm = ({post})=>{\r\n    const id = useSelector((state)=>state.user.me?.id);\r\n    const{addCommentDone,addCommentLoading} = useSelector((state)=>state.post);\r\n    const [commentText,onChangeCommentText,setCommentText]=useInput('');\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n        if(addCommentDone){\r\n            setCommentText('');\r\n        }\r\n    },[addCommentDone])\r\n\r\n    const onSubmitComment = useCallback(()=>{\r\n        if(id&&commentText!=='')dispatch(addComment({content:commentText, postId:post.id,userId:id}))\r\n    },[commentText,id]);\r\n    return (\r\n        <Form onFinish={onSubmitComment}>\r\n            <Form.Item style={{position:'relative',margi:0}}>\r\n                <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4}/>\r\n                <Button \r\n                style={{position:'absolute',right:0,bottom:-40,zIndex:1}} \r\n                type=\"primary\" \r\n                htmlType=\"submit\"\r\n                loading={addCommentLoading}\r\n                >삐약</Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nCommentForm.propTypes={\r\n    post:PropTypes.object.isRequired,\r\n}\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}