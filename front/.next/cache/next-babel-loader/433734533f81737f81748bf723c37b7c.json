{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n/**\r\n * all, call ,fork, take : saga의 effect\r\n * fork(param) : param으로 받은 함수를 실행\r\n * ※fork 와 call 은 엄연히 다르다!!\r\n *      - fork : 비동기 함수 호출\r\n *      - call : 동기 함수 호출. 즉 인자로 받은 함수가 실행 완료 까지 기다림.\r\n * ※ react - thunk 에서는 비동기 action creator을 직접 실행했지만,\r\n *    saga에서는 event-listener 형식으로 실행한다.\r\n * take : action creater 의 event-listener 생성\r\n * call(func) :  func 를 실행하고 return 값을 받음..\r\n * put : action 을 dispatch 해주는 거.\r\n */\n//logInAPI 함수 호출. generator이 아님. \n\nfunction logInAPI() {\n  //서버에 요청전송\n  return axios.post('/api/login');\n}\n\nfunction logIn() {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take('LOG_OUT_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('ADD_POST_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // rootSaga에 비동기 액션들을 넣어준다.\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/index.js"],"names":["logIn","watchLogin","watchLogOut","watchAddPost","rootSaga","all","fork","take","put","axios","logInAPI","post","call","result","type","data","response"],"mappings":";;oDAqBUA,K;qDAeAC,U;qDAKAC,W;qDAIAC,Y;qDAKeC,Q;;AAlDzB,SAAQC,GAAR,EAAYC,IAAZ,EAAiBC,IAAjB,EAAsBC,GAAtB,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,QAAT,GAAmB;AACf;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUX,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMY,IAAI,CAACF,QAAD,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAML,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAC,gBADC;AAENC,YAAAA,IAAI,EAACF,MAAM,CAACE;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMP,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAC,gBADC;AAENC,YAAAA,IAAI,EAAC,YAAIC,QAAJ,CAAaD;AAFZ,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,IAAI,CAAC,gBAAD,EAAkBP,KAAlB,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,IAAI,CAAC,iBAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUJ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,IAAI,CAAC,kBAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,eAAe,SAAUH,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,EAGNI,IAAI,CAACH,YAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {all,fork,take,put} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n/**\r\n * all, call ,fork, take : saga의 effect\r\n * fork(param) : param으로 받은 함수를 실행\r\n * ※fork 와 call 은 엄연히 다르다!!\r\n *      - fork : 비동기 함수 호출\r\n *      - call : 동기 함수 호출. 즉 인자로 받은 함수가 실행 완료 까지 기다림.\r\n * ※ react - thunk 에서는 비동기 action creator을 직접 실행했지만,\r\n *    saga에서는 event-listener 형식으로 실행한다.\r\n * take : action creater 의 event-listener 생성\r\n * call(func) :  func 를 실행하고 return 값을 받음..\r\n * put : action 을 dispatch 해주는 거.\r\n */\r\n\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logInAPI(){\r\n    //서버에 요청전송\r\n    return axios.post('/api/login')\r\n}\r\n\r\nfunction* logIn(){\r\n    try{\r\n        const result = yield call(logInAPI);//logInAPI 함수의 반환갑을 받는다.\r\n        yield put({\r\n            type:'LOG_IN_SUCCESS',\r\n            data:result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:'LOG_IN_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield take('LOG_IN_REQUEST',logIn);\r\n    //LOG_IN action 이 실행 될 때 까지 기다리겠다.\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield take('LOG_OUT_REQUEST');\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield take('ADD_POST_REQUEST');\r\n}\r\n\r\n// rootSaga에 비동기 액션들을 넣어준다.\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}