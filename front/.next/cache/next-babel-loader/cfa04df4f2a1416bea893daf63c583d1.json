{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios'; //logInAPI 함수 호출. generator이 아님. \n\nfunction logInAPI(data) {\n  //서버에 요청전송\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI,action.data);\n    //logInAPI 함수의 반환값을 받는다.\n    //call 을 통해 logInAPI 함수를 매개변수 action.data으로 지정하여\n    //호출하고 반환받는다.\n    yield delay(2000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n} //logInAPI 함수 호출. generator이 아님. \n\n\nfunction logOutAPI() {\n  //서버에 요청전송\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut); //LOG_IN action 이 실행 될 때 까지 기다리겠다.\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,GAAjB,EAAqBC,UAArB,EAAgCC,KAAhC,QAA4C,oBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACC;AACA;AACA;AACA;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,gBADC;AAENJ,MAAAA,IAAI,EAACK,MAAM,CAACL;AAFN,KAAD,CAAT;AAIH,GAXD,CAWC,OAAMM,GAAN,EAAU;AACP,UAAMX,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,gBADC;AAENJ,MAAAA,IAAI,EAACM,GAAG,CAACC,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAIH;AACJ,C,CAGD;;;AACA,SAASQ,SAAT,GAAoB;AAChB;AACA,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,iBADC;AAENJ,MAAAA,IAAI,EAACK,MAAM,CAACL;AAFN,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMM,GAAN,EAAU;AACP,UAAMX,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAC,iBADC;AAENJ,MAAAA,IAAI,EAACM,GAAG,CAACC,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,UAAV,GAAsB;AAClB,QAAMd,UAAU,CAAC,gBAAD,EAAkBM,KAAlB,CAAhB;AACH;;AAED,UAAUS,WAAV,GAAuB;AACnB,QAAMf,UAAU,CAAC,iBAAD,EAAmBa,MAAnB,CAAhB,CADmB,CAEnB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAoB;AAC/B,QAAMnB,GAAG,CAAC,CACNC,IAAI,CAACgB,UAAD,CADE,EAENhB,IAAI,CAACiB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all,fork,put,takeLatest,delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logInAPI(data){\r\n    //서버에 요청전송\r\n    return axios.post('/api/login',data)\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        //const result = yield call(logInAPI,action.data);\r\n        //logInAPI 함수의 반환값을 받는다.\r\n        //call 을 통해 logInAPI 함수를 매개변수 action.data으로 지정하여\r\n        //호출하고 반환받는다.\r\n        yield delay(2000);\r\n        \r\n        yield put({\r\n            type:'LOG_IN_SUCCESS',\r\n            data:result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:'LOG_IN_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logOutAPI(){\r\n    //서버에 요청전송\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n        //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type:'LOG_OUT_SUCCESS',\r\n            data:result.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:'LOG_OUT_FAILURE',\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST',logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST',logOut);\r\n    //LOG_IN action 이 실행 될 때 까지 기다리겠다.\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}