{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware]; //middleware 배열에 이후에 redux saga 나 thunk 같은 middle들을 \n  //적용할 떄 삽입해준다.\n  //compose 함수에 applyMiddleware 은 미들웨어 배열의 전개형태를 받는다.\n  //단순 array 를 받으면 error이 뜬다!!\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,SAAQC,eAAR,EAAwBC,OAAxB,EAAiCC,WAAjC,QAAmD,OAAnD;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAEC,QAAF,QAAEA,QAAF;AAAA,MAAWC,QAAX,QAAWA,QAAX;AAAA,SAAuB,UAACC,IAAD;AAAA,WAAQ,UAACC,MAAD,EAAU;AAC9DC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACH,KAH+C;AAAA,GAAvB;AAAA,CAAzB;;AAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAI;AACvB,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAgBR,gBAAhB,CAApB,CAFuB,CAGvB;AACA;AACA;AACA;;AACA,MAAMU,QAAQ,GAAG,QAChBhB,OAAO,CAACD,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADS,GAEhBb,mBAAmB,CAACH,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAFpB;AAGA,MAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAASY,QAAT,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACH,CAbD;;AAeA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAgB;AACzCQ,EAAAA,KAAK;AADoC,CAAhB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import {createWrapper} from 'next-redux-wrapper';\r\nimport {applyMiddleware,compose, createStore} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({dispatch,getState})=>(next)=>(action)=>{\r\n    console.log(action);\r\n    return next(action);\r\n}\r\n\r\nconst configureStore = ()=>{\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware,loggerMiddleware];\r\n    //middleware 배열에 이후에 redux saga 나 thunk 같은 middle들을 \r\n    //적용할 떄 삽입해준다.\r\n    //compose 함수에 applyMiddleware 은 미들웨어 배열의 전개형태를 받는다.\r\n    //단순 array 를 받으면 error이 뜬다!!\r\n    const enhancer = process.env.NODE_ENV==='production'\r\n    ?compose(applyMiddleware(...middlewares))\r\n    :composeWithDevTools(applyMiddleware(...middlewares))\r\n    const store = createStore(reducer,enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga)\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore,{\r\n    debug:process.env.NODE_ENV==='development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}