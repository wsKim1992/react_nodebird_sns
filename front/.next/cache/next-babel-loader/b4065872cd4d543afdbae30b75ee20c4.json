{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from \"redux\"; //combineReducers 통해서 정의되어진 reducer들 합침\n//index reducer은 serverside rendering 을 위해\n//구현되어진 HYDRATE 를 적용하기 위해 정의하였음..\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;AACA;AACA;;AACA,IAAMC,WAAW,GAAGD,eAAe,CAAC;AAChCE,EAAAA,KAAK,EAAC,iBAAmB;AAAA,QAAlBC,KAAkB,uEAAZ,EAAY;AAAA,QAATC,MAAS;;AACrB,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKR,OAAL;AACI,+CAAWM,KAAX,GAAoBC,MAAM,CAACE,OAA3B;;AAEJ;AACI,eAAOH,KAAP;AALR;AAOH,GAT+B;AAUhCL,EAAAA,IAAI,EAAJA,IAVgC;AAWhCC,EAAAA,IAAI,EAAJA;AAXgC,CAAD,CAAnC;AAcA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from './user';\r\nimport post from './post';\r\nimport { combineReducers } from \"redux\";\r\n\r\n//combineReducers 통해서 정의되어진 reducer들 합침\r\n//index reducer은 serverside rendering 을 위해\r\n//구현되어진 HYDRATE 를 적용하기 위해 정의하였음..\r\nconst rootReducer = combineReducers({\r\n    index:(state={},action)=>{\r\n        switch(action.type){\r\n            case HYDRATE:\r\n                return {...state,...action.payload};\r\n            \r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n})\r\n\r\nexport default rootReducer; "]},"metadata":{},"sourceType":"module"}