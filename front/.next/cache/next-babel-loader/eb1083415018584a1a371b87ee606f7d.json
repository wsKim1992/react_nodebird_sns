{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: {\n        id: id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/commnet`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","shortId","generate","type","content","err","response","watchAddPost","addCommentAPI","postId","addComment","watchCommentPost","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,GAAjB,EAAqBC,UAArB,EAAgCC,KAAhC,QAA4C,oBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,EAAyBC,gBAAzB,EAA0CC,gBAA1C,EACKC,mBADL,EACyBC,mBADzB,EAC6CC,mBAD7C,QACuE,kBADvE;AAEA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOT,KAAK,CAACU,IAAN,CAAW,WAAX,EAAuBD,IAAvB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMc,EAAE,GAAGC,OAAO,CAACC,QAAR,EAAX;AACA,UAAMlB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACd,gBADC;AAENO,MAAAA,IAAI,EAACG,MAAM,CAACH;AAFN,KAAD,CAAT;AAIA,UAAMZ,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACT,cADC;AAENE,MAAAA,IAAI,EAAC;AACDI,QAAAA,EAAE,EAACA,EADF;AAEDI,QAAAA,OAAO,EAACL,MAAM,CAACH;AAFd;AAFC,KAAD,CAAT;AAOH,GAfD,CAeC,OAAMS,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACb,gBADC;AAENM,MAAAA,IAAI,EAACS,GAAG,CAACC,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,YAAV,GAAwB;AACpB,QAAMtB,UAAU,CAACG,gBAAD,EAAkBU,OAAlB,CAAhB;AACH;;AAED,SAASU,aAAT,CAAuBZ,IAAvB,EAA4B;AACxB,SAAOT,KAAK,CAACU,IAAN,CAAY,aAAYD,IAAI,CAACa,MAAO,UAApC,EAA8Cb,IAA9C,CAAP;AACH;;AAED,UAAUc,UAAV,CAAqBX,MAArB,EAA4B;AACxB,MAAG;AACC;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACX,mBADC;AAENI,MAAAA,IAAI,EAACG,MAAM,CAACH;AAFN,KAAD,CAAT;AAIH,GAPD,CAOC,OAAMS,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAACV,mBADC;AAENG,MAAAA,IAAI,EAACS,GAAG,CAACC,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUe,gBAAV,GAA4B;AACxB,QAAM1B,UAAU,CAACM,mBAAD,EAAqBmB,UAArB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAACwB,YAAD,CADE,EAENxB,IAAI,CAAC4B,gBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {all,fork,put,takeLatest,delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE\r\n    ,ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_FAILURE} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post',data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:action.data\r\n        })\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:{\r\n                id:id,\r\n                content:action.data,\r\n            }\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/api/post/${data.postId}/commnet`,data);\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        //const result = yield call(addPostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            data:err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchCommentPost(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchCommentPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}