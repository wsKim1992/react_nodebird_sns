{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; //logInAPI 함수 호출. generator이 아님. \n\nfunction logInAPI(data) {\n  //서버에 요청전송\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); //const result = yield call(logInAPI,action.data);\n    //logInAPI 함수의 반환값을 받는다.\n    //call 을 통해 logInAPI 함수를 매개변수 action.data으로 지정하여\n    //호출하고 반환받는다.\n\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} //logInAPI 함수 호출. generator이 아님. \n\n\nfunction logOutAPI() {\n  //서버에 요청전송\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  //서버에 요청전송\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //LOG_IN action 이 실행 될 때 까지 기다리겠다.\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnFollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/study/nodebird_sns/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","watchFollow","watchUnFollow"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,IAAZ,EAAiBC,GAAjB,EAAqBC,UAArB,EAAgCC,KAAhC,QAA4C,oBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAuBC,cAAvB,EAAsCC,cAAtC,EACKC,eADL,EACqBC,eADrB,EACqCC,eADrC,EAEKC,eAFL,EAEqBC,eAFrB,EAEqCC,eAFrC,QAE2D,kBAF3D,C,CAGA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB;AACA,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAG;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADD,CAEC;AACA;AACA;AACA;;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACf,cADC;AAENS,MAAAA,IAAI,EAACG,MAAM,CAACH;AAFN,KAAD,CAAT;AAIH,GAZD,CAYC,OAAMO,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACd,cADC;AAENgB,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAGD;;;AACA,SAASU,SAAT,GAAoB;AAChB;AACA,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUU,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACZ;AADC,KAAD,CAAT;AAGH,GAND,CAMC,OAAMa,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACX,eADC;AAENa,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASY,SAAT,GAAoB;AAChB;AACA,SAAOvB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUY,MAAV,GAAkB;AACd,MAAG;AACC;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACT;AADC,KAAD,CAAT;AAGH,GAND,CAMC,OAAMU,GAAN,EAAU;AACP,UAAMrB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAACR,eADC;AAENU,MAAAA,KAAK,EAACD,GAAG,CAACE,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUc,UAAV,GAAsB;AAClB,QAAM3B,UAAU,CAACG,cAAD,EAAgBY,KAAhB,CAAhB;AACH;;AAED,UAAUa,WAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACM,eAAD,EAAiBkB,MAAjB,CAAhB,CADmB,CAEnB;AACH;;AAED,UAAUK,WAAV,GAAuB;AACnB,QAAM7B,UAAU,CAACS,eAAD,EAAiBiB,MAAjB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAACiC,WAAD,CADE,EAENjC,IAAI,CAACkC,aAAD,CAFE,EAGNlC,IAAI,CAAC6B,UAAD,CAHE,EAIN7B,IAAI,CAAC8B,WAAD,CAJE,EAKN9B,IAAI,CAAC+B,WAAD,CALE,CAAD,CAAT;AAOH","sourcesContent":["import {all,fork,put,takeLatest,delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {LOG_IN_REQUEST,LOG_IN_SUCCESS,LOG_IN_FAILURE\r\n    ,LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE\r\n    ,SIGN_UP_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_FAILURE} from '../reducers/user'\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logInAPI(data){\r\n    //서버에 요청전송\r\n    return axios.post('/api/login',data)\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga login');\r\n        //const result = yield call(logInAPI,action.data);\r\n        //logInAPI 함수의 반환값을 받는다.\r\n        //call 을 통해 logInAPI 함수를 매개변수 action.data으로 지정하여\r\n        //호출하고 반환받는다.\r\n        yield delay(2000);\r\n        \r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data:action.data\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:LOG_IN_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n//logInAPI 함수 호출. generator이 아님. \r\nfunction logOutAPI(){\r\n    //서버에 요청전송\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n        //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type:LOG_OUT_SUCCESS,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(){\r\n    //서버에 요청전송\r\n    return axios.post('/api/signUp')\r\n}\r\n\r\nfunction* signUp(){\r\n    try{\r\n        //const result = yield call(logOutAPI);//logInAPI 함수의 반환갑을 받는다.\r\n        yield delay(1000);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        })\r\n    }catch(err){\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error:err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn);\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n    //LOG_IN action 이 실행 될 때 까지 기다리겠다.\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST,signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnFollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}