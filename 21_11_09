redux-saga : 

 * all, call ,fork, take : saga의 effect
 * fork(param) : param으로 받은 함수를 실행
 * ※fork 와 call 은 엄연히 다르다!!
 *      - fork : 비동기 함수 호출. unBlocking
 *      - call : 동기 함수 호출. 즉 인자로 받은 함수가 실행 완료 까지 기다림.
 *              Blocking
 * ※ react - thunk 에서는 비동기 action creator을 직접 실행했지만,
 *    saga에서는 event-listener 형식으로 실행한다.
 * take : action creater 의 event-listener 생성
            - action 을 단 한번만 받는다..
            - 즉 action을 설정한 event-listener 을 통해 받아
              한 번 실행하면 헤당 event-listener이 사라진다.
            * takeLatest : 여러번 연속으로 실수로 실행버튼이나 실행 이벤트를
                           발생시키려는 시도를 했을 때, 가장 마지막에 시도한 
                           event 호출만을 실행함. 즉 이미 완료된 호출이 아닌 이상
                           다 취소시키고 마지막에 호출한 시도를 실행시킴!

            * takeLeading : takeLatest 와 비슷한 형식의 메서드. 다만 가장 먼저 
                            시도된 event 호출만 실행됨.

            * throttle : 지정된 시간동안 단 1번만 이벤트를 호출할 수 있게함!
                        ex) yield throttle('ADD_POST_REQUEST',addPost,2000);
                            - 2초동안 ADD_POST_REQUEST event를 단 1번만 호출할 수 있게 함.
 * call(func) :  func 를 실행하고 return 값을 받음..
 * put : action 을 dispatch 해주는 거.
 * delay : setTimeout 같은 역할
 
 